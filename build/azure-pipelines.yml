# QR Code Generator for Umbraco 8
# Build, test, create packages, publish packages and create release on GitHub.

trigger:
  branches:
    include:
    - main-u10
    - release-u10
    - develop-u10
  tags:
    exclude:
    - v*
  paths:
    include:
    - 'src/*'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  testProject: '**/*Tests/*.csproj'
  gitVersionPath: 'build/GitVersion.yml'
  umbracoPackageDefinitionPath: '$(System.DefaultWorkingDirectory)/build/package.xml'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  publishOnGithubRelease: $[eq(variables['Build.SourceBranch'], 'refs/heads/main-u10')]
  publishUmbracoPackage: $[eq(variables['Build.SourceBranch'], 'refs/heads/main-u10')]
  publishOnNugetOrg: $[eq(variables['Build.SourceBranch'], 'refs/heads/main-u10')]
  addTagToRepository: $[eq(variables['Build.SourceBranch'], 'refs/heads/main-u10')]
  updateChangelogVersion: $[eq(variables['Build.SourceBranch'], 'refs/heads/main-u10')]
  gitEmail: 'devops@robolynx.pl'
  gitUserName: 'DevOps Pipeline' 

steps:
- checkout: self
  persistCredentials: true
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet 5.8.1'
  inputs:    
    versionSpec: 5.8.1
- task: NuGetCommand@2
  displayName: 'Restore NuGets'
  inputs:
    restoreSolution: '$(solution)'
    includeNuGetOrg: true
- task: gitversion/setup@0
  displayName: 'Setup GitVersions'
  inputs:
    versionSpec: 5.6.6
- task: gitversion/execute@0
  displayName: 'Get build version'
  inputs:
    useConfigFile: true
    configFilePath: '$(gitVersionPath)'
- script: |
    git config --global user.email $gitEmail
    git config --global user.name "$gitUserName"
  displayName: 'Set GIT Author identity'
- powershell: | 
    $regex_current_version = $current_version -replace '\.','\.'
    $changelog = Get-Content -Path .\CHANGELOG.md -Raw
    if ($changelog -match "##\s?\[Unreleased\]") 
    {
        $current_date = Get-Date -UFormat "%Y-%m-%d"
        $changelog -replace "##\s?\[Unreleased\].*","## [$current_version] - $current_date" | Set-Content -Path .\CHANGELOG.md

        Write-Host "Unreleased section in CHANGELOG.md was updated into current version [$current_version] - $current_date."
        Write-Host "##vso[task.setvariable variable=changelogUpdated]true"
    }
    elseif ($changelog -match "##\s?\[$regex_current_version\]")
    {
        Write-Host "##vso[task.LogIssue type=warning;]CHANGELOG.md already contains section with current version."
        Write-Host "##vso[task.setvariable variable=changelogUpdated]false"
    }
    else
    {
        Write-Host "##vso[task.LogIssue type=error;]CHANGELOG.md do not contains Unreleased section with new changes."
        Write-Host "##vso[task.setvariable variable=changelogUpdated]false"
        exit 1
    }
  displayName: 'Change [Unrelease] section header in CHANGELOG to [$current_version]'
  condition: and(succeeded(), eq(variables['updateChangelogVersion'], true))
  env:
    current_version: $(GitVersion.NuGetVersionV2)
- script: |
    git add CHANGELOG.md 
    git commit -m "CHNAGELOG.md update"
    git push origin $(Build.SourceBranchName)
  condition: and(succeeded(), and(eq(variables['updateChangelogVersion'], true), eq(variables['changelogUpdated'], true)))
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Commit changes in CHANGELOG.md'
- task: DotNetCoreCLI@2
  displayName: 'Build project ($(buildConfiguration) configuration)'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.SemVer'
- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: test
    projects: '$(testProject)'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
- task: DotNetCoreCLI@2
  displayName: 'Create NuGet package'
  inputs:
    command: pack
    projects: '$(solution)'
    includesymbols: true
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.NuGetVersionV2'
    buildProperties: 'SymbolPackageFormat=snupkg'
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
- script: |
     git tag v$(GitVersion.NuGetVersionV2)
     git push origin v$(GitVersion.NuGetVersionV2) 
  condition: and(succeeded(), eq(variables['addTagToRepository'], true))
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Add tag to commit'
- task: NuGetAuthenticate@0
  displayName: 'Authenticate DevOps Artifacts Nuget'
- task: NuGetCommand@2
  displayName: 'Publish NuGet package on DevOps Artifacts'
  inputs:
    command: push
    publishVstsFeed: 'RoboLynx.Umbraco.QRCodeGenerator/QRCodeGeneratorNugets'
    allowPackageConflicts: true
- task: NuGetCommand@2
  displayName: 'Publish NuGet package on NuGet.org'
  condition: and(succeeded(), eq(variables['publishOnNugetOrg'], true))
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: sebafelisNuGetAccountForQRCodeGenerator
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.NuGetVersionV2'
- powershell: | 
    $regex_current_version = $current_version -replace '\.','\.'
    $regex_pattern = "(?s)(?:\n##\s\[$regex_current_version\].*?\r\n(?:\s*\r\n)*)(?<content>.*?)(?:\r\n##\s\[\d+\.\d+\.\d+].*?\r\n|\s*\Z)"

    $changelog = Get-Content -Path .\CHANGELOG.md -Raw
    if ($changelog -match "##\s?\[$regex_current_version\]") 
    {
        $changes = $changelog | Select-String -Pattern $regex_pattern
        $releaseNotes = $changes.Matches[0].Groups['content'] -replace "\r\n","%0D%0A"
        Write-Host "##vso[task.setvariable variable=releaseNotes]$releaseNotes"
        Write-Host "Extracted release note:"
        Write-Host "$releaseNotes"
    }
    else 
    {
        Write-Host "##vso[task.LogIssue type=error;]CHANGELOG.md don't contains section for current version."
    }
  displayName: 'Extract release note from CHANGELOG.md'
  condition: and(succeeded(), eq(variables['publishOnGithubRelease'], true))
  env:
    current_version: $(GitVersion.NuGetVersionV2)
- task: GitHubRelease@1
  displayName: 'Publish on Github Release'
  condition: and(succeeded(), eq(variables['publishOnGithubRelease'], true))
  inputs:
    gitHubConnection: 'github.com_sebafelis'
    repositoryName: '$(Build.Repository.Name)'
    action: create
    target: '$(Build.SourceVersion)'
    tagSource: gitTag
    tagPattern: 'v.*'
    isDraft: false
    isPreRelease: false
    assetUploadMode: delete
    assets: '$(Build.ArtifactStagingDirectory)/*'
    addChangeLog: false   
    releaseNotesSource: inline
    releaseNotesInline: $(releaseNotes)
    